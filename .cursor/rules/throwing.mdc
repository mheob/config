---
description: Throwing Errors
globs: **/*.ts,**/*.tsx
alwaysApply: false
---
# Throwing errors

Think carefully before implementing code that throws errors.

If a thrown error produces a desirable outcome in the system, go for it. For instance, throwing a custom error inside a backend framework's request handler.

However, for code that you would need a manual try catch for, consider using a result type instead:

```ts
type Result<T, E extends Error> = { error: E; ok: false } | { ok: true; value: T };
```

For example, when parsing JSON:

```ts
const parseJson = (input: string): Result<unknown, Error> => {
	try {
		return { ok: true, value: JSON.parse(input) };
	} catch (error) {
		return { error: error as Error, ok: false };
	}
};
```

This way you can handle the error in the caller:

```ts
const result = parseJson('{ "name": "John" }');

if (result.ok) {
	console.log(result.value);
} else {
	console.error(result.error);
}
```
